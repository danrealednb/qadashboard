// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "bugs",
    columns: [
      { name: "month", type: "string" },
      { name: "year", type: "string" },
      { name: "total_bugs", type: "int" },
      { name: "dev_bugs", type: "int" },
      { name: "prod_bugs", type: "int" },
    ],
  },
  {
    name: "test_types",
    columns: [
      { name: "month", type: "string" },
      { name: "year", type: "string" },
      { name: "total_tests", type: "int" },
      { name: "automated_tests", type: "int" },
      { name: "manual_tests", type: "int" },
      { name: "accessibility_tests", type: "int" },
      { name: "data_validation_tests", type: "int" },
      { name: "e2e_tests", type: "int" },
      { name: "functional_tests", type: "int" },
      { name: "integration_tests", type: "int" },
      { name: "performance_tests", type: "int" },
      { name: "load_tests", type: "int" },
      { name: "regression_tests", type: "int" },
      { name: "security_tests", type: "int" },
      { name: "smoke_tests", type: "int" },
      { name: "unit_tests", type: "int" },
      { name: "non_functional_tests", type: "int" },
      { name: "other_tests", type: "int" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Bugs = InferredTypes["bugs"];
export type BugsRecord = Bugs & XataRecord;

export type TestTypes = InferredTypes["test_types"];
export type TestTypesRecord = TestTypes & XataRecord;

export type DatabaseSchema = {
  bugs: BugsRecord;
  test_types: TestTypesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://realed-s-workspace-i7sf28.us-east-1.xata.sh/db/qa-dashboard",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
